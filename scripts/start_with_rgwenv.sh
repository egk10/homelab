#!/usr/bin/env bash
# start_with_rgwenv.sh
# Usage: ./scripts/start_with_rgwenv.sh [services...]
# Merges immich_rgw.env (generated by the admin script) with local .env into a temporary env file,
# then runs `docker compose --env-file <tmp> up -d [services]` so secrets are never committed.

set -euo pipefail

REPO_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
IMMICH_ENV="$REPO_ROOT/immich_rgw.env"
LOCAL_ENV="$REPO_ROOT/.env"

if [ ! -f "$IMMICH_ENV" ]; then
  echo "Error: $IMMICH_ENV not found. Run the admin script on a Ceph admin host and copy immich_rgw.env to the repo root." >&2
  exit 2
fi

# Create a temporary env file that merges local .env (if present) and immich_rgw.env
TMP_ENV=$(mktemp /tmp/homelab.env.XXXXXX)
trap 'rm -f "$TMP_ENV"' EXIT

# If .env exists, copy it first (local values can be overridden by immich_rgw.env)
if [ -f "$LOCAL_ENV" ]; then
  # Filter out lines that would collide: CEPH_S3_* keys will be taken from immich_rgw.env
  grep -vE '^CEPH_S3_' "$LOCAL_ENV" > "$TMP_ENV" || true
fi

# Append immich credentials (do not print them)
cat "$IMMICH_ENV" >> "$TMP_ENV"

echo "Starting docker compose using merged env file: $TMP_ENV"

# Default services if none provided
if [ "$#" -eq 0 ]; then
  SERVICES=(immich-postgres immich-redis immich-server nextcloud-db nextcloud vaultwarden tsdproxy)
else
  SERVICES=("$@")
fi

# Run docker compose with the generated env file
# Use the repo root as working directory
( cd "$REPO_ROOT" && docker compose --env-file "$TMP_ENV" up -d "${SERVICES[@]}" )

echo "Docker compose started for: ${SERVICES[*]}"

echo "Note: immich_rgw.env contains secrets and is file-permissioned (600). Do not commit it."

exit 0
